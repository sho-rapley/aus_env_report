theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::Purple-Brown", direction = 1)+
scale_fill_gradient2(low = "#312A56FF", mid = "white", high = "#68001DFF", midpoint = 100)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "#312A56FF", mid = "white", high = "#68001DFF", midpoint = 100)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
theme_void()
# map (playing with colour options)
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
scale_colour_viridis_c(option = "inferno")+
theme_void()
# map (playing with colour options)
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
scale_fill_viridis_c(option = "inferno")+
theme_void()
# map (playing with colour options)
ggplot()+
geom_spatvector(data = ibra_ts2, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
scale_fill_viridis_c(option = "inferno")+
theme_void()
# combine terrestrial and marine polygons
ibra_ts3 <- left_join(ibra, ibra_ts2)
# map (playing with colour options)
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
scale_fill_viridis_c(option = "inferno")+
theme_void()
# map (playing with colour options)
ggplot()+
geom_spatvector(data = ibra_ts2, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
scale_fill_viridis_c(option = "inferno", direction = -1)+
theme_void()
# map (playing with colour options)
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
scale_fill_viridis_c(option = "inferno", direction = -1)+
theme_void()
# save polygons
writeVector(ibra_ts3, "ibra_ts/ibra_ts.shp", filetype = "ESRI Shapefile")
setwd("C:/Users/shosh/OneDrive/2 PhD/GIT/ausenv_biodiversity")
# save polygons
writeVector(ibra_ts3, "ibra_ts/ibra_ts.shp", filetype = "ESRI Shapefile")
# library
pacman::p_load(janitor, tidyverse)
# 1993-2022 data
# downloaded from https://apps.aims.gov.au/metadata/view/5bb9a340-4ade-11dc-8f56-00008a07204e
coral_past <- read.csv("manta-tow-1993-2022.csv") %>%
clean_names() %>%
group_by(report_year) %>%
summarise(coral_cover = mean(mean_live_coral),
sd = sd(mean_live_coral),
reef_count = length(report_year),
ci = as.numeric(1.96*(sd/sqrt(reef_count))))
# 1993-2022 data
# downloaded from https://apps.aims.gov.au/metadata/view/5bb9a340-4ade-11dc-8f56-00008a07204e
coral_past <- read.csv("data/manta-tow-1993-2022.csv") %>%
clean_names() %>%
group_by(report_year) %>%
summarise(coral_cover = mean(mean_live_coral),
sd = sd(mean_live_coral),
reef_count = length(report_year),
ci = as.numeric(1.96*(sd/sqrt(reef_count))))
# 2023 data - manually imported from the reef data viewer by sector
# https://apps.aims.gov.au/reef-monitoring/sector/list
coral_2023 <- read.csv("data/manta-tow-2023.csv") %>%
clean_names() %>%
group_by(report_year) %>%
summarise(coral_cover = mean(live_hard_coral_cover),
sd = sd(live_hard_coral_cover),
reef_count = length(report_year),
ci = as.numeric(1.96*(sd/sqrt(reef_count))))
# add 2023 to previous data
coral <- rbind(coral_past, coral_2023)
# plot
ggplot(data=coral)+
geom_ribbon(aes(ymin = coral_cover - ci,
ymax = coral_cover + ci,
x = report_year), fill = "skyblue", alpha = .4)+
geom_point(data = subset(coral, report_year==2023), aes(report_year, coral_cover))+
geom_line(aes(report_year, coral_cover))+
theme_classic()+
ylim(0, 50)
View(coral)
View(coral_2023)
# read in processed listings 2000-2023
epbc_all <- read_excel("data/epbc_processed_2023.csv")
# Load packages
pacman::p_load(janitor, tidyverse, readxl)
# read in processed listings 2000-2023
epbc_all <- read_excel("data/epbc_processed_2023.csv")
# read in processed listings 2000-2023
epbc_all <- read_excel("data/epbc_processed_2023.csv.xlsx")
# read in processed listings 2000-2023
epbc_all <- read.csv("data/epbc_processed_2023.csv")
View(epbc_all)
# create list of species present in previous calendar year to bring across to current calendar year
epbc_prev <- epbc_all %>%
filter(year == 2023)
View(epbc_prev)
# bring across species from previous calendar year to current calendar year
epbc_prev <- epbc_all %>%
filter(year == 2023) %>%
mutate(year == 2024)
# bring across species from previous calendar year to current calendar year
epbc_prev <- epbc_all %>%
filter(year == 2023) %>%
mutate(year = 2024)
# read in changes to the list in 2024
epbc_changes <- read_excel("epbc_changes_since2023_2024.xlsx")
# read in changes to the list in 2024
epbc_changes <- read_excel("data/epbc_changes_since2023_2024.xlsx")
View(epbc_changes)
View(epbc_all)
# read in changes to the list in 2024
epbc_changes <- read_excel("data/epbc_changes_since2023_2024.xlsx") %>%
clean_names() %>%
# add group information
left_join(select(epbc_all, c(group, species)))
View(epbc_changes)
View(epbc_all)
View(epbc_all)
unique(epbc_all$group)
# read in changes to the list in 2024
epbc_changes <- read_excel("data/epbc_changes_since2023_2024.xlsx") %>%
clean_names() %>%
# add group information
left_join(select(epbc_all, c(group, species)))
# read in changes to the list in 2024
epbc_changes <- read_excel("data/epbc_changes_since2023_2024.xlsx") %>%
clean_names())
# read in changes to the list in 2024
epbc_changes <- read_excel("data/epbc_changes_since2023_2024.xlsx") %>%
clean_names()
View(epbc_changes)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev)
View(epbc_prev)
# read in changes to the list in 2024
epbc_changes <- read_excel("data/epbc_changes_since2023_2024.xlsx") %>%
clean_names() %>%
# drop effective date and add year
select(!effective) %>%
mutate(year = 2024)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev)
View(epbc_2024)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
arrange(species)
View(epbc_2024)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
arrange(species) %>%
# where duplicates, keep the transfer listing
duplicated(species)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
arrange(species) %>%
# where duplicates, keep the transfer listing
duplicated()
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
arrange(species)
View(epbc_2024)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev)
View(epbc_2024)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
# where duplicates, keep the transfer listing
distinct(species)
View(epbc_2024)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
# where duplicates, keep the transfer listing
distinct(species, .keep_all = TRUE)
View(epbc_2024)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
# where duplicates, keep the transfer listing
distinct(species, .keep_all = TRUE) %>%
arrange(species)
View(epbc_2024)
# append to 2000-2023 lists
epbc_updated <- rbind(epbc_all, epbc_2024)
View(epbc_updated)
View(epbc_2024)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
# where duplicates, keep the transfer listing
distinct(species, .keep_all = TRUE) %>%
# rename transfers to destination status
mutate(listing = ifelse(grepl("to Extinct",status),"Extinct",
ifelse(grepl("to Critically Endangered",status),"Critically Endangered",
ifelse(grepl("to Endangered",status),"Endangered",
ifelse(grepl("to Vulnerable",status),"Vulnerable")))))
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
# where duplicates, keep the transfer listing
distinct(species, .keep_all = TRUE) %>%
# rename transfers to destination status
mutate(listing = ifelse(grepl("to Extinct",status),"Extinct",
ifelse(grepl("to Critically Endangered",status),"Critically Endangered",
ifelse(grepl("to Endangered",status),"Endangered",
ifelse(grepl("to Vulnerable",status),"Vulnerable". status)))))
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
# where duplicates, keep the transfer listing
distinct(species, .keep_all = TRUE) %>%
# rename transfers to destination status
mutate(listing = ifelse(grepl("to Extinct",status),"Extinct",
ifelse(grepl("to Critically Endangered",status),"Critically Endangered",
ifelse(grepl("to Endangered",status),"Endangered",
ifelse(grepl("to Vulnerable",status),"Vulnerable", status)))))
View(epbc_2024)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
# where duplicates, keep the transfer listing
distinct(species, .keep_all = TRUE) %>%
# rename transfers to destination status
mutate(status = ifelse(grepl("to Extinct",status),"Extinct",
ifelse(grepl("to Critically Endangered",status),"Critically Endangered",
ifelse(grepl("to Endangered",status),"Endangered",
ifelse(grepl("to Vulnerable",status),"Vulnerable", status)))))
unique(epbc_2024$status)
# append to 2000-2023 lists
epbc_updated <- rbind(epbc_all, epbc_2024)
View(epbc_updated)
# read in changes to the list in 2024
epbc_changes <- read_excel("data/epbc_changes_since2023_2024.xlsx", sheet = 1) %>%
clean_names() %>%
# drop effective date and add year
select(!effective) %>%
mutate(year = 2024)
# read in removals from the list in 2024
epbc_changes <- read_excel("data/epbc_changes_since2023_2024.xlsx", sheet = 2) %>%
clean_names()
# read in removals from the list in 2024
epbc_remove <- read_excel("data/epbc_changes_since2023_2024.xlsx", sheet = 2) %>%
clean_names()
View(epbc_remove)
remove <- epbc_remove$species
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
# where duplicates, keep the transfer listing
distinct(species, .keep_all = TRUE) %>%
# rename transfers to destination status
mutate(status = ifelse(grepl("to Extinct",status),"Extinct",
ifelse(grepl("to Critically Endangered",status),"Critically Endangered",
ifelse(grepl("to Endangered",status),"Endangered",
ifelse(grepl("to Vulnerable",status),"Vulnerable", status))))) %>%
# remove species delisted
filter(!species %in% remove)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
# where duplicates, keep the transfer listing
distinct(species, .keep_all = TRUE) %>%
# rename transfers to destination status
mutate(status = ifelse(grepl("to Extinct",status),"Extinct",
ifelse(grepl("to Critically Endangered",status),"Critically Endangered",
ifelse(grepl("to Endangered",status),"Endangered",
ifelse(grepl("to Vulnerable",status),"Vulnerable", status))))) %>%
# remove species delisted
filter(!species %in% remove)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev)
# read in processed listings 2000-2023
epbc_all <- read.csv("data/epbc_processed_2023.csv")
# read in changes to the list in 2024
epbc_changes <- read_excel("data/epbc_changes_since2023_2024.xlsx", sheet = 1) %>%
clean_names() %>%
# drop effective date and add year
select(!effective) %>%
mutate(year = 2024)
# read in processed listings 2000-2023
epbc_all <- read.csv("data/epbc_processed_2023.csv")
# read in changes to the list in 2024
epbc_changes <- read_excel("data/epbc_changes_since2023_2024.xlsx", sheet = 1) %>%
clean_names() %>%
# drop effective date and add year
select(!effective) %>%
mutate(year = 2024)
# read in delistings in 2024
epbc_remove <- read_excel("data/epbc_changes_since2023_2024.xlsx", sheet = 2) %>%
clean_names()
remove <- epbc_remove$species
# bring across species from previous calendar year to current calendar year
epbc_prev <- epbc_all %>%
filter(year == 2023) %>%
mutate(year = 2024)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
# where duplicates, keep the transfer listing
distinct(species, .keep_all = TRUE) %>%
# rename transfers to destination status
mutate(status = ifelse(grepl("to Extinct",status),"Extinct",
ifelse(grepl("to Critically Endangered",status),"Critically Endangered",
ifelse(grepl("to Endangered",status),"Endangered",
ifelse(grepl("to Vulnerable",status),"Vulnerable", status))))) %>%
# remove species delisted
filter(!species %in% remove)
# append to 2000-2023 lists
epbc_updated <- rbind(epbc_all, epbc_2024)
# combine full listings with changes to the list
epbc_2024 <- rbind(epbc_changes, epbc_prev) %>%
# where duplicates, keep the transfer listing
distinct(species, .keep_all = TRUE) %>%
# rename transfers to destination status
mutate(status = ifelse(grepl("to Extinct",status),"Extinct",
ifelse(grepl("to Critically Endangered",status),"Critically Endangered",
ifelse(grepl("to Endangered",status),"Endangered",
ifelse(grepl("to Vulnerable",status),"Vulnerable", status))))) %>%
# remove species delisted
filter(!species %in% remove)
View(epbc_2024)
# append to 2000-2023 lists
epbc_updated <- rbind(epbc_all, epbc_2024)
# append to 2000-2023 lists
epbc_updated <- rbind(epbc_all, epbc_2024) %>%
arrange(species)
View(epbc_updated)
# write out
write.csv(epbc_updated, "data/epbc_processed_2024.csv", row.names = FALSE)
# read in processed data to this calendar year
epbc <- read.csv("data/epbc_processed_2024.csv")
View(epbc)
# read in processed data to this calendar year
epbc <- read.csv("data/epbc_processed_2024.csv") %>%
group_by(year, group, status) %>%
summarise(count = count(species))
# read in processed data to this calendar year
epbc <- read.csv("data/epbc_processed_2024.csv") %>%
group_by(year, group, status) %>%
summarise(count = length(species))
# read in processed data to this calendar year
epbc <- read.csv("data/epbc_processed_2024.csv") %>%
group_by(groups = c(year, group, status)) %>%
summarise(count = length(species))
# read in processed data to this calendar year
epbc <- read.csv("data/epbc_processed_2024.csv") %>%
group_by(year, group, status) %>%
summarise(count = length(species))
View(epbc)
# read in processed data to this calendar year
epbc <- read.csv("data/epbc_processed_2024.csv") %>%
group_by(year, status) %>%
summarise(count = length(species))
View(epbc)
View(epbc)
ifelse(grepl("Conservation Dependent",status),"Vulnerable",status))
# read in processed data to this calendar year
epbc <- read.csv("data/epbc_processed_2024.csv") %>%
group_by(year, status) %>%
summarise(count = length(species)) %>%
# lump categories
mutate(status = ifelse(grepl("Extinct in the wild",status),"Extinct",
ifelse(grepl("Conservation Dependent",status),"Vulnerable",status)))
View(epbc)
# write out
write.csv(epbc, "data/epbc_summary_2024.csv")
# write out
write.csv(epbc, "data/epbc_summary_2024.csv", row.names = FALSE)
ggplot(epbc)+
geom_bar(aes(year, count, group = status, fill = status))
ggplot(epbc)+
geom_bar(aes(x = year, y = count, group = status, fill = status))
ggplot(epbc)+
geom_bar(aes(x = year, y = count, group = status, fill = status), stat = identity)
ggplot(epbc)+
geom_bar(aes(x = year, y = count, group = status, fill = status, stat = identity))
ggplot(epbc)+
geom_bar(aes(x = year, y = count, group = status, fill = status, stat = identity),
position="stack", stat="identity")
ggplot(epbc)+
geom_bar(aes(x = year, y = count, group = status, fill = status),
position="stack", stat="identity")
# reorder epbc for plot
epbc <- epbc %>%
mutate(status = factor(status, levels = c("Extinct", "Critically Endangered", "Endangered", "Vulnerable")))
# stacked bar chart
ggplot(epbc)+
geom_bar(aes(x = year, y = count, group = status, fill = status),
position="stack", stat="identity")
# stacked bar chart
ggplot(epbc)+
geom_bar(aes(x = year, y = count, group = status, fill = status),
position="stack", stat="identity")+
theme_minimal()
# stacked bar chart
ggplot(epbc)+
geom_bar(aes(x = year, y = count, group = status, fill = status),
position="stack", stat="identity")+
theme_classic()
# stacked bar chart
ggplot(epbc)+
geom_bar(aes(x = year, y = count, group = status, fill = status),
position="stack", stat="identity")+
theme_classic()+
xlab(element_blank())+
ylab("Count of species")
# stacked bar chart
ggplot(epbc)+
geom_bar(aes(x = year, y = count, group = status, fill = status),
position="stack", stat="identity")+
theme_classic()+
xlab(element_blank())+
ylab("Count of species")+
scale_fill_manual(c("gray5", "firebrick4", "tan1", "lightgoldenrod"))
# stacked bar chart
ggplot(epbc)+
geom_bar(aes(x = year, y = count, group = status, fill = status),
position="stack", stat="identity")+
theme_classic()+
xlab(element_blank())+
ylab("Count of species")+
scale_fill_manual(values = c("gray5", "firebrick4", "tan1", "lightgoldenrod"))
# pivot wider
epbc <- epbc %>%
pivot_wider(status, names_from = status)
# pivot wider
epbc <- epbc %>%
pivot_wider(names_from = status, values_from = count)
View(epbc)
# reorder epbc for plot
epbc <- epbc %>%
mutate(status = factor(status, levels = c("Extinct", "Critically Endangered", "Endangered", "Vulnerable")))
# read in processed data to this calendar year
epbc <- read.csv("data/epbc_processed_2024.csv") %>%
group_by(year, status) %>%
summarise(count = length(species)) %>%
# lump categories
mutate(status = ifelse(grepl("Extinct in the wild",status),"Extinct",
ifelse(grepl("Conservation Dependent",status),"Vulnerable",status)))
View(epbc)
unique(epbc$status)
# pivot wider
epbc <- epbc %>%
pivot_wider(names_from = status, values_from = count)
View(epbc)
# pivot wider
epbc <- epbc %>%
pivot_wider(names_from = status, values_from = count, values_fn = sum())
# read in processed data to this calendar year
epbc <- read.csv("data/epbc_processed_2024.csv") %>%
group_by(year, status) %>%
summarise(count = length(species)) %>%
# lump categories
mutate(status = ifelse(grepl("Extinct in the wild",status),"Extinct",
ifelse(grepl("Conservation Dependent",status),"Vulnerable",status)))
# pivot wider
epbc <- epbc %>%
pivot_wider(names_from = status, values_from = count, values_fn = sum())
View(epbc)
# read in processed data to this calendar year
epbc <- read.csv("data/epbc_processed_2024.csv") %>%
# lump categories
mutate(status = ifelse(grepl("Extinct in the wild",status),"Extinct",
ifelse(grepl("Conservation Dependent",status),"Vulnerable",status))) %>%
group_by(year, status) %>%
summarise(count = length(species))
View(epbc)
# reorder epbc for plot
epbc <- epbc %>%
mutate(status = factor(status, levels = c("Extinct", "Critically Endangered", "Endangered", "Vulnerable")))
# stacked bar chart
ggplot(epbc)+
geom_bar(aes(x = year, y = count, group = status, fill = status),
position="stack", stat="identity")+
theme_classic()+
xlab(element_blank())+
ylab("Count of species")+
scale_fill_manual(values = c("gray5", "firebrick4", "tan1", "lightgoldenrod"))
# pivot wider
epbc <- epbc %>%
pivot_wider(names_from = status, values_from = count)
View(epbc)
# write out
write.csv(epbc, "data/epbc_summary_2024.csv", row.names = FALSE)
