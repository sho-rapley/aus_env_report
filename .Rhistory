filter(regions %in% c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT")) %>%
group_by(regions) %>%
summarise(ts_count = length(scientific))
View(sp_isl)
# count island species
sp_isl <- ts_df %>%
filter(regions %in% c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT")) %>%
distinct(scientific)
# count island species
sp_isl <- ts_df %>%
filter(regions %in% c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT")) %>%
group_by(regions) %>%
summarise(ts_count = length(unique(scientific)))
View(sp_isl)
# map
ggplot()+
geom_spatvector(data = ibra_ts_all, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("grDevices::Geyser")+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts_all, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("scico::berlin")+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts_all, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("scico::vik")+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts_all, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("ggthemes::Sunset-Sunrise Diverging")+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts_all, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("ggthemes::Sunset-Sunrise Diverging")+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts_all, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("ggthemes::Orange")+
theme_void()
?scale_fill_paletteer_c
# map
ggplot()+
geom_spatvector(data = ibra_ts_all, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("ggthemes::Orange-Blue Diverging",
direction = -1)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts_all, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("ggthemes::Red-Black Diverging",
direction = -1)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts_all, aes(fill = ts_count))+
scale_fill_gradient(low = "#D6E8F3FF", high = "#9E3D22FF")+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts_all, aes(fill = ts_count))+
scale_fill_gradient(low = "#B0D3E8FF", high = "#9E3D22FF")+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts_all, aes(fill = ts_count))+
scale_fill_gradient(low = "#4B7EABFF", high = "#9E3D22FF")+
theme_void()
# count by state
state <- ts_df %>%
group_by(region) %>%
summarise(unique(species))
View(ts_df)
# count by state
state <- ts_df %>%
select(c(scientific, regions))
View(state)
# count by state
state <- ts_df %>%
select(c(scientific, regions)) %>%
distinct()
View(state)
# count by state
state <- ts_df %>%
select(c(scientific, regions)) %>%
distinct() %>%
separate(sep = "; ")
# count by state
state <- ts_df %>%
select(c(scientific, regions)) %>%
distinct() %>%
separate(col = regions, sep = "; ")
# count by state
state <- ts_df %>%
select(c(scientific, regions)) %>%
distinct() %>%
separate(col = regions, sep = "; ", into = NA)
# count by state
state <- ts_df %>%
select(c(scientific, regions)) %>%
distinct() %>%
separate(col = regions, sep = "; ", into = c("region1", "region2", "region3"))
# count by state
state <- ts_df %>%
select(c(scientific, regions)) %>%
distinct() %>%
separate_wider_delim(col = regions, sep = "; ")
# count by state
state <- ts_df %>%
select(c(scientific, regions)) %>%
distinct() %>%
separate_wider_delim(col = regions, delim = "; ")
# count by state
state <- ts_df %>%
select(c(scientific, regions)) %>%
distinct() %>%
separate_wider_delim(col = regions, delim = "; ", names_sep = TRUE)
unique(ts_df$regions)
# count by state
temp <- ts_df %>%
filter(regions %in% "QLD")
View(temp)
# count by state
temp <- dplyr::filter(ts_df, grepl("QLD", regions))
# count island species
sp_isl <- ts_df %>%
filter(grepl(c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT"), regions)) %>%
group_by(regions) %>%
summarise(ts_count = length(unique(scientific)))
# count island species
islands <- c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT")
sp_isl <- ts_df %>%
dplyr::filter(grepl(paste(islands, collapse='|'), regions)) %>%
group_by(regions) %>%
summarise(ts_count = length(unique(scientific)))
View(sp_isl)
sp_isl <- ts_df %>%
dplyr::filter(grepl(paste(islands, collapse='|'), regions))
View(sp_isl)
sp_isl <- ts_df %>%
dplyr::filter(grepl(paste(islands, collapse='|'), regions)) %>%
distinct(species)
sp_isl <- ts_df %>%
dplyr::filter(grepl(paste(islands, collapse='|'), regions)) %>%
distinct(scientific)
View(sp_isl)
sp_isl <- ts_df %>%
filter(grepl(i, regions))
sp_isl <- ts_df %>%
filter(grepl(1, regions))
sp_isl <- ts_df %>%
filter(grepl("ACI", regions))
sp_isl <- ts_df %>%
filter(grepl(islands[1], regions))
View(sp_isl)
sp_isl <- ts_df %>%
filter(grepl(islands[2], regions))
View(sp_isl)
sp_isl <- ts_df %>%
filter(grepl(islands[2], regions)) %>%
distinct(species)
sp_isl <- ts_df %>%
filter(grepl(islands[2], regions)) %>%
distinct(scientific)
ts_isl <- data.frame()
# count island species
islands <- c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT")
ts_isl <- data.frame()
for(i in 1:length(islands)){
sp_isl <- ts_df %>%
filter(grepl(islands[i], regions)) %>%
distinct(scientific)
isl_temp <- data.frame(island = islands[i],
ts = length(sp_isl))
ts_isl <- rbind(ts_isl, isl_temp)
}
View(ts_isl)
ts_isl <- data.frame()
for(i in 1:length(islands)){
sp_isl <- ts_df %>%
filter(grepl(islands[i], regions)) %>%
distinct(scientific)
isl_temp <- data.frame(island = islands[i],
ts = nrow(sp_isl))
ts_isl <- rbind(ts_isl, isl_temp)
}
View(ts_isl)
# count island species
islands <- c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT", "TAS")
source("C:/Users/shosh/OneDrive/2 PhD/GIT/ausenv_biodiversity/epbc_map.R", echo=TRUE)
ts_isl <- data.frame()
for(i in 1:length(islands)){
sp_isl <- ts_df %>%
filter(grepl(islands[i], regions)) %>%
distinct(scientific)
isl_temp <- data.frame(island = islands[i],
ts = nrow(sp_isl))
ts_isl <- rbind(ts_isl, isl_temp)
}
View(sp_isl)
View(ts_isl)
unique(ts_df$regions)
# count species by islands and states and territories
regions <- c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT",
"TAS", "NSW", "JBT", "QLD", "VIC", "WA", "SA", "NT", "ACT")
ts_isl <- data.frame()
for(i in 1:length(islands)){
sp_isl <- ts_df %>%
filter(grepl(islands[i], regions)) %>%
distinct(scientific)
isl_temp <- data.frame(island = islands[i],
ts = nrow(sp_isl))
ts_isl <- rbind(ts_isl, isl_temp)
}
View(ts_isl)
# count species by islands and states and territories
juris <- c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT",
"TAS", "NSW", "JBT", "QLD", "VIC", "WA", "SA", "NT", "ACT")
ts_juris <- data.frame()
for(i in 1:length(juris)){
sp <- ts_df %>%
filter(grepl(juris[i], regions)) %>%
distinct(scientific)
temp <- data.frame(island = juris[i],
ts = nrow(sp_isl))
ts_juris <- rbind(ts_isl, isl_temp)
}
View(ts_juris)
# count species by islands and states and territories
juris <- c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT",
"TAS", "NSW", "JBT", "QLD", "VIC", "WA", "SA", "NT", "ACT")
ts_juris <- data.frame()
for(i in 1:length(juris)){
sp <- ts_df %>%
filter(grepl(juris[i], regions)) %>%
distinct(scientific)
temp <- data.frame(island = juris[i],
ts = nrow(sp_isl))
ts_juris <- rbind(ts_isl, temp)
}
View(ts_juris)
# count species by islands and states and territories
juris <- c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT",
"TAS", "NSW", "JBT", "QLD", "VIC", "WA", "SA", "NT", "ACT")
ts_juris <- data.frame()
for(i in 1:length(juris)){
sp <- ts_df %>%
filter(grepl(juris[i], regions)) %>%
distinct(scientific)
temp <- data.frame(island = juris[i],
ts = nrow(sp))
ts_juris <- rbind(ts_isl, temp)
}
View(ts_juris)
# count species by islands and states and territories
juris <- c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT",
"TAS", "NSW", "JBT", "QLD", "VIC", "WA", "SA", "NT", "ACT")
ts_juris <- data.frame()
for(i in 1:length(juris)){
sp <- ts_df %>%
filter(grepl(juris[i], regions)) %>%
distinct(scientific)
temp <- data.frame(jurisdiction = juris[i],
ts = nrow(sp))
ts_juris <- rbind(ts_isl, temp)
}
# count species by islands and states and territories
juris <- c("ACI", "CKI", "CI", "CSI", "NFI", "HMI", "AAT",
"TAS", "NSW", "JBT", "QLD", "VIC", "WA", "SA", "NT", "ACT")
ts_juris <- data.frame()
for(i in 1:length(juris)){
sp <- ts_df %>%
filter(grepl(juris[i], regions)) %>%
distinct(scientific)
temp <- data.frame(jurisdiction = juris[i],
ts = nrow(sp))
ts_juris <- rbind(ts_juris, temp)
}
View(ts_juris)
# library
pacman::p_load(janitor, ozmaps, paletteer, sf, terra, tidyterra, tidyverse)
# ibra subregions
# Available at: https://fed.dcceew.gov.au/datasets/14495298f2744efd8960ff952a15ee9d
ibra <- vect("ibra61_reg/ibra61_reg.shp") %>%
clean_names() %>%
select(reg_name)
# TS public grid shapefiles - not in directory because too large.
# Available at: https://www.environment.gov.au/fed/catalog/search/resource/details.page?uuid=%7B337B05B6-254E-47AD-A701-C55D9A0435EA%7D
ts <- vect("TS_grids/SNES_Public.shp") %>%
clean_names() %>%
filter(threatened %in% c("Critically Endangered", "Conservation Dependent",
"Vulnerable", "Endangered")) %>%
project(crs(ibra))
setwd("C:/Users/shosh/OneDrive/2 PhD/GIT/ausenv_biodiversity")
# ibra subregions
# Available at: https://fed.dcceew.gov.au/datasets/14495298f2744efd8960ff952a15ee9d
ibra <- vect("ibra61_reg/ibra61_reg.shp") %>%
clean_names() %>%
select(reg_name)
setwd("C:/Users/shosh/OneDrive/1 Ecology work/AusEnv 2023")
# TS public grid shapefiles - not in directory because too large.
# Available at: https://www.environment.gov.au/fed/catalog/search/resource/details.page?uuid=%7B337B05B6-254E-47AD-A701-C55D9A0435EA%7D
ts <- vect("TS_grids/SNES_Public.shp") %>%
clean_names() %>%
filter(threatened %in% c("Critically Endangered", "Conservation Dependent",
"Vulnerable", "Endangered")) %>%
project(crs(ibra))
# threatened species data frame without geometry
ts_df <- ts %>%
st_as_sf() %>%
st_drop_geometry()
head(ts_df)
ibra_ts <- terra::intersect(sp_terra, ibra)
# count terrestrial threatened species by ibra subregion
sp_terra <- ts %>%
filter(is.na(marine) | marine == "Listed - overfly marine area")
ibra_ts <- terra::intersect(sp_terra, ibra)
ibra_ts_count <- ibra_ts %>%
st_as_sf() %>%
st_drop_geometry()
ibra_ts2 <- ibra_ts %>%
st_as_sf() %>%
st_drop_geometry()
View(ibra_ts2)
ibra_ts2 <- ibra_ts %>%
st_as_sf() %>%
st_drop_geometry() %>%
select(c("scientific", "reg_name")) %>%
distinct()
length(unique(ts$scientific))
View(ibra_ts2)
temp <- ibra_ts2 %>%
group_by(reg_name) %>%
summarise(ts_count = length(scientific))
View(temp)
View(temp)
ibra_ts2 <- ibra_ts %>%
st_as_sf() %>%
st_drop_geometry() %>%
select(c("scientific", "reg_name")) %>%
distinct() %>%
group_by(reg_name) %>%
summarise(ts_count = length(scientific))
# count marine species
sp_marine <- ts %>%
filter(marine == "Listed") %>%
select(scientific) %>%
distinct()
# create polygon for marine species
marine <- vect(ext(c(110, 155, -45, -9)), crs(ibra)) %>%
erase(ibra) %>%
st_as_sf() %>%
mutate(reg_name = "Marine",
ts_count = nrow(sp_marine)) %>%
vect()
# combine terrestrial and marine polygons
ibra_ts_all <- left_join(ibra, ibra_ts_count) %>%
rbind(marine)
# combine terrestrial and marine polygons
ibra_ts3 <- left_join(ibra, ibra_ts2) %>%
rbind(marine)
temp <- st_as_df(ibra_ts3)
temp <- st_as_sf(ibra_ts3)
View(temp)
# map
ggplot()+
geom_spatvector(data = ibra_ts_all, aes(fill = ts_count))+
scale_fill_gradient(low = "#4B7EABFF", high = "#9E3D22FF")+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
scale_fill_gradient(low = "#4B7EABFF", high = "#9E3D22FF")+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("ggthemes::Orange-Blue Diverging",
direction = -1)+
#scale_fill_gradient(low = "#4B7EABFF", high = "#9E3D22FF")+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("ggthemes::Orange-Blue Diverging", direction = -1)+
scale_fill_gradient2(low = "white", mid = "#4B7EABFF", high = "#9E3D22FF")+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("ggthemes::Orange-Blue Diverging", direction = -1)+
scale_fill_gradient2(low = "darkblue", mid = "orange2", high = "#9E3D22FF")+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("ggthemes::Orange-Blue Diverging", direction = -1)+
scale_fill_gradient2(low = "darkblue", mid = "orange2", high = "#9E3D22FF", midpoint = 200)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("ggthemes::Orange-Blue Diverging", direction = -1)+
scale_fill_gradient2(low = "#2B5C8AFF", mid = "#F3A150FF", high = "#B81840FF", midpoint = 200)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("ggthemes::Orange-Blue Diverging", direction = -1)+
scale_fill_gradient2(low = "#2B5C8AFF", mid = "white", high = "#B81840FF", midpoint = 200)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("grDevices::Purple-Brown", direction = -1)+
#scale_fill_gradient2(low = "#2B5C8AFF", mid = "white", high = "#B81840FF", midpoint = 200)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::Purple-Brown", direction = -1)+
scale_fill_gradient2(low = "#ECBDA1FF", mid = "white", high = "#312A56FF", midpoint = 200)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("grDevices::Purple-Brown", direction = 1)+
#scale_fill_gradient2(low = "#ECBDA1FF", mid = "white", high = "#312A56FF", midpoint = 200)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::Purple-Brown", direction = 1)+
scale_fill_gradient2(low = "#312A56FF", mid = "white", high = "#68001DFF", midpoint = 200)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::Purple-Brown", direction = 1)+
scale_fill_gradient2(low = "#312A56FF", mid = "white", high = "#68001DFF", midpoint = 100)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "#312A56FF", mid = "white", high = "#68001DFF", midpoint = 100)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
theme_void()
# map
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
theme_void()
# map (playing with colour options)
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
scale_colour_viridis_c(option = "inferno")+
theme_void()
# map (playing with colour options)
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
scale_fill_viridis_c(option = "inferno")+
theme_void()
# map (playing with colour options)
ggplot()+
geom_spatvector(data = ibra_ts2, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
scale_fill_viridis_c(option = "inferno")+
theme_void()
# combine terrestrial and marine polygons
ibra_ts3 <- left_join(ibra, ibra_ts2)
# map (playing with colour options)
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
scale_fill_viridis_c(option = "inferno")+
theme_void()
# map (playing with colour options)
ggplot()+
geom_spatvector(data = ibra_ts2, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
scale_fill_viridis_c(option = "inferno", direction = -1)+
theme_void()
# map (playing with colour options)
ggplot()+
geom_spatvector(data = ibra_ts3, aes(fill = ts_count))+
#paletteer::scale_fill_paletteer_c("grDevices::BrBG", direction = 1)+
#scale_fill_gradient2(low = "black", mid = "white", high = "#68001DFF", midpoint = 50)+
scale_fill_viridis_c(option = "inferno", direction = -1)+
theme_void()
# save polygons
writeVector(ibra_ts3, "ibra_ts/ibra_ts.shp", filetype = "ESRI Shapefile")
setwd("C:/Users/shosh/OneDrive/2 PhD/GIT/ausenv_biodiversity")
# save polygons
writeVector(ibra_ts3, "ibra_ts/ibra_ts.shp", filetype = "ESRI Shapefile")
